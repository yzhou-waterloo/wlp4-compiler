#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <unordered_set>
#include <unordered_map>
unsigned char wlp4scan_dfa[] = {
  0x2e, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x0a, 0x30, 0x2d,
  0x39, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x28, 0x20,
  0x29, 0x20, 0x7b, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x21, 0x20, 0x3c, 0x20,
  0x3e, 0x20, 0x2b, 0x20, 0x2d, 0x20, 0x2a, 0x20, 0x2f, 0x20, 0x25, 0x20,
  0x2c, 0x20, 0x3b, 0x20, 0x5b, 0x20, 0x5d, 0x20, 0x26, 0x20, 0x0a, 0x2e,
  0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x21, 0x0a, 0x4e, 0x55,
  0x4d, 0x21, 0x0a, 0x5a, 0x45, 0x52, 0x4f, 0x21, 0x0a, 0x49, 0x44, 0x21,
  0x0a, 0x57, 0x21, 0x0a, 0x57, 0x41, 0x21, 0x0a, 0x57, 0x41, 0x49, 0x21,
  0x0a, 0x57, 0x41, 0x49, 0x4e, 0x21, 0x0a, 0x49, 0x21, 0x0a, 0x49, 0x4e,
  0x21, 0x0a, 0x49, 0x4e, 0x54, 0x21, 0x0a, 0x49, 0x46, 0x21, 0x0a, 0x45,
  0x21, 0x0a, 0x45, 0x4c, 0x21, 0x0a, 0x45, 0x4c, 0x53, 0x21, 0x0a, 0x45,
  0x4c, 0x53, 0x45, 0x21, 0x0a, 0x57, 0x48, 0x21, 0x0a, 0x57, 0x48, 0x49,
  0x21, 0x0a, 0x57, 0x48, 0x49, 0x4c, 0x21, 0x0a, 0x57, 0x48, 0x49, 0x4c,
  0x45, 0x21, 0x0a, 0x50, 0x21, 0x0a, 0x50, 0x52, 0x21, 0x0a, 0x50, 0x52,
  0x49, 0x21, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x21, 0x0a, 0x50, 0x52, 0x49,
  0x4e, 0x54, 0x21, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c, 0x21, 0x0a,
  0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c, 0x4e, 0x21, 0x0a, 0x50, 0x55, 0x21,
  0x0a, 0x50, 0x55, 0x54, 0x21, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x21, 0x0a,
  0x50, 0x55, 0x54, 0x43, 0x48, 0x21, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x48,
  0x41, 0x21, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x48, 0x41, 0x52, 0x21, 0x0a,
  0x47, 0x21, 0x0a, 0x47, 0x45, 0x31, 0x21, 0x0a, 0x47, 0x45, 0x54, 0x21,
  0x0a, 0x47, 0x45, 0x54, 0x43, 0x21, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x48,
  0x21, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x48, 0x41, 0x21, 0x0a, 0x47, 0x45,
  0x54, 0x43, 0x48, 0x41, 0x52, 0x21, 0x0a, 0x52, 0x21, 0x0a, 0x52, 0x45,
  0x21, 0x0a, 0x52, 0x45, 0x54, 0x21, 0x0a, 0x52, 0x45, 0x54, 0x55, 0x21,
  0x0a, 0x52, 0x45, 0x54, 0x55, 0x52, 0x21, 0x0a, 0x52, 0x45, 0x54, 0x55,
  0x52, 0x4e, 0x21, 0x0a, 0x4e, 0x31, 0x21, 0x0a, 0x4e, 0x55, 0x21, 0x0a,
  0x4e, 0x55, 0x4c, 0x21, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x21, 0x0a, 0x4e,
  0x21, 0x0a, 0x4e, 0x45, 0x31, 0x21, 0x0a, 0x4e, 0x45, 0x57, 0x21, 0x0a,
  0x44, 0x21, 0x0a, 0x44, 0x45, 0x21, 0x0a, 0x44, 0x45, 0x4c, 0x21, 0x0a,
  0x44, 0x45, 0x4c, 0x45, 0x21, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x21,
  0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x21, 0x0a, 0x4c, 0x42, 0x52,
  0x41, 0x43, 0x45, 0x21, 0x0a, 0x52, 0x42, 0x52, 0x41, 0x43, 0x45, 0x21,
  0x0a, 0x4c, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x21, 0x0a, 0x52, 0x50, 0x41,
  0x52, 0x45, 0x4e, 0x21, 0x0a, 0x42, 0x45, 0x43, 0x4f, 0x4d, 0x45, 0x53,
  0x21, 0x0a, 0x45, 0x51, 0x21, 0x0a, 0x4e, 0x4f, 0x54, 0x0a, 0x4e, 0x45,
  0x21, 0x0a, 0x4c, 0x54, 0x21, 0x0a, 0x47, 0x54, 0x21, 0x0a, 0x4c, 0x45,
  0x21, 0x0a, 0x47, 0x45, 0x21, 0x0a, 0x50, 0x4c, 0x55, 0x53, 0x21, 0x0a,
  0x4d, 0x49, 0x4e, 0x55, 0x53, 0x21, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x21,
  0x0a, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x21, 0x0a, 0x50, 0x43, 0x54, 0x21,
  0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x21, 0x0a, 0x53, 0x45, 0x4d, 0x49,
  0x21, 0x0a, 0x4c, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x21, 0x0a, 0x52, 0x42,
  0x52, 0x41, 0x43, 0x4b, 0x21, 0x0a, 0x41, 0x4d, 0x50, 0x21, 0x0a, 0x2e,
  0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x30, 0x20, 0x5a, 0x45, 0x52, 0x4f,
  0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x31, 0x2d, 0x39, 0x20, 0x4e,
  0x55, 0x4d, 0x0a, 0x4e, 0x55, 0x4d, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x4e,
  0x55, 0x4d, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x28, 0x20, 0x4c,
  0x50, 0x41, 0x52, 0x45, 0x4e, 0x20, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x20, 0x29, 0x20, 0x52, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x0a, 0x73, 0x74,
  0x61, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x4c, 0x42, 0x52, 0x41, 0x43, 0x45,
  0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x7d, 0x20, 0x52, 0x42, 0x52,
  0x41, 0x43, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x3d, 0x20,
  0x42, 0x45, 0x43, 0x4f, 0x4d, 0x45, 0x53, 0x0a, 0x42, 0x45, 0x43, 0x4f,
  0x4d, 0x45, 0x53, 0x20, 0x3d, 0x20, 0x45, 0x51, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x21, 0x20, 0x4e, 0x4f, 0x54, 0x0a, 0x4e, 0x4f, 0x54,
  0x20, 0x3d, 0x20, 0x4e, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x3c, 0x20, 0x4c, 0x54, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x3e,
  0x20, 0x47, 0x54, 0x0a, 0x4c, 0x54, 0x20, 0x3d, 0x20, 0x4c, 0x45, 0x0a,
  0x47, 0x54, 0x20, 0x3d, 0x20, 0x47, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72,
  0x74, 0x20, 0x2b, 0x20, 0x50, 0x4c, 0x55, 0x53, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x2d, 0x20, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x0a, 0x73,
  0x74, 0x61, 0x72, 0x74, 0x20, 0x2a, 0x20, 0x53, 0x54, 0x41, 0x52, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2f, 0x20, 0x53, 0x4c, 0x41, 0x53,
  0x48, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x25, 0x20, 0x50, 0x43,
  0x54, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2c, 0x20, 0x43, 0x4f,
  0x4d, 0x4d, 0x41, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x3b, 0x20,
  0x53, 0x45, 0x4d, 0x49, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x5b,
  0x20, 0x4c, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x0a, 0x73, 0x74, 0x61, 0x72,
  0x74, 0x20, 0x5d, 0x20, 0x52, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x0a, 0x73,
  0x74, 0x61, 0x72, 0x74, 0x20, 0x26, 0x20, 0x41, 0x4d, 0x50, 0x0a, 0x73,
  0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x20, 0x57, 0x0a, 0x57, 0x20, 0x61,
  0x20, 0x57, 0x41, 0x0a, 0x57, 0x20, 0x68, 0x20, 0x57, 0x48, 0x0a, 0x57,
  0x20, 0x62, 0x2d, 0x67, 0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x57, 0x41, 0x20, 0x69, 0x20, 0x57, 0x41, 0x49,
  0x0a, 0x57, 0x41, 0x20, 0x61, 0x2d, 0x68, 0x20, 0x6a, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x57, 0x41, 0x49, 0x20, 0x6e,
  0x20, 0x57, 0x41, 0x49, 0x4e, 0x0a, 0x57, 0x41, 0x49, 0x20, 0x61, 0x2d,
  0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44,
  0x0a, 0x57, 0x41, 0x49, 0x4e, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x49, 0x44, 0x0a, 0x57, 0x48, 0x20, 0x69, 0x20, 0x57, 0x48,
  0x49, 0x20, 0x0a, 0x57, 0x48, 0x20, 0x61, 0x2d, 0x68, 0x20, 0x6a, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x57, 0x48, 0x49,
  0x20, 0x6c, 0x20, 0x57, 0x48, 0x49, 0x4c, 0x0a, 0x57, 0x48, 0x49, 0x20,
  0x61, 0x2d, 0x6b, 0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x0a, 0x57, 0x48, 0x49, 0x4c, 0x20, 0x65, 0x20, 0x57, 0x48,
  0x49, 0x4c, 0x45, 0x20, 0x0a, 0x57, 0x48, 0x49, 0x4c, 0x20, 0x61, 0x2d,
  0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44,
  0x0a, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x69, 0x20, 0x49, 0x0a, 0x49, 0x20, 0x6e, 0x20, 0x49, 0x4e, 0x0a, 0x49,
  0x20, 0x66, 0x20, 0x49, 0x46, 0x20, 0x0a, 0x49, 0x20, 0x61, 0x2d, 0x65,
  0x20, 0x67, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x49, 0x4e, 0x20, 0x74, 0x20, 0x49, 0x4e, 0x54,
  0x20, 0x0a, 0x49, 0x4e, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x49, 0x4e,
  0x54, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44,
  0x20, 0x0a, 0x49, 0x46, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x65, 0x20,
  0x45, 0x0a, 0x45, 0x20, 0x6c, 0x20, 0x45, 0x4c, 0x0a, 0x45, 0x20, 0x61,
  0x2d, 0x6b, 0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49,
  0x44, 0x0a, 0x45, 0x4c, 0x20, 0x73, 0x20, 0x45, 0x4c, 0x53, 0x0a, 0x45,
  0x4c, 0x20, 0x61, 0x2d, 0x72, 0x20, 0x74, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x49, 0x44, 0x0a, 0x45, 0x4c, 0x53, 0x20, 0x65, 0x20, 0x45,
  0x4c, 0x53, 0x45, 0x0a, 0x45, 0x4c, 0x53, 0x20, 0x61, 0x2d, 0x64, 0x20,
  0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x45,
  0x4c, 0x53, 0x45, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x70, 0x20, 0x50,
  0x20, 0x0a, 0x50, 0x20, 0x72, 0x20, 0x50, 0x52, 0x0a, 0x50, 0x20, 0x61,
  0x2d, 0x71, 0x20, 0x73, 0x20, 0x74, 0x20, 0x76, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x52, 0x20, 0x69, 0x20, 0x50,
  0x52, 0x49, 0x0a, 0x50, 0x52, 0x20, 0x61, 0x2d, 0x68, 0x20, 0x6a, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x52, 0x49,
  0x20, 0x6e, 0x20, 0x50, 0x52, 0x49, 0x4e, 0x0a, 0x50, 0x52, 0x49, 0x20,
  0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x20, 0x74, 0x20, 0x50, 0x52,
  0x49, 0x4e, 0x54, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x20, 0x61, 0x2d, 0x73,
  0x20, 0x75, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a,
  0x50, 0x52, 0x49, 0x4e, 0x54, 0x20, 0x6c, 0x20, 0x50, 0x52, 0x49, 0x4e,
  0x54, 0x4c, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x20, 0x61, 0x2d, 0x6b,
  0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a,
  0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c, 0x20, 0x6e, 0x20, 0x50, 0x52, 0x49,
  0x4e, 0x54, 0x4c, 0x4e, 0x20, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c,
  0x20, 0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c, 0x4e, 0x20,
  0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50,
  0x20, 0x75, 0x20, 0x50, 0x55, 0x0a, 0x50, 0x55, 0x20, 0x74, 0x20, 0x50,
  0x55, 0x54, 0x0a, 0x50, 0x55, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x55, 0x54,
  0x20, 0x63, 0x20, 0x50, 0x55, 0x54, 0x43, 0x0a, 0x50, 0x55, 0x54, 0x20,
  0x61, 0x20, 0x62, 0x20, 0x64, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x20, 0x68, 0x20, 0x50, 0x55,
  0x54, 0x43, 0x48, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x20, 0x61, 0x2d, 0x67,
  0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a,
  0x50, 0x55, 0x54, 0x43, 0x48, 0x20, 0x61, 0x20, 0x50, 0x55, 0x54, 0x43,
  0x48, 0x41, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x48, 0x20, 0x62, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x55, 0x54, 0x43,
  0x48, 0x41, 0x20, 0x72, 0x20, 0x50, 0x55, 0x54, 0x43, 0x48, 0x41, 0x52,
  0x0a, 0x50, 0x55, 0x54, 0x43, 0x48, 0x41, 0x20, 0x61, 0x2d, 0x71, 0x20,
  0x73, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x50,
  0x55, 0x54, 0x43, 0x48, 0x41, 0x52, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x67, 0x20, 0x47, 0x0a, 0x47, 0x20, 0x65, 0x20, 0x47, 0x45, 0x31, 0x0a,
  0x47, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x49, 0x44, 0x0a, 0x47, 0x45, 0x31, 0x20, 0x74, 0x20, 0x47,
  0x45, 0x54, 0x0a, 0x47, 0x45, 0x31, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x47, 0x45,
  0x54, 0x20, 0x63, 0x20, 0x47, 0x45, 0x54, 0x43, 0x0a, 0x47, 0x45, 0x54,
  0x20, 0x61, 0x20, 0x62, 0x20, 0x64, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x20, 0x68, 0x20, 0x47,
  0x45, 0x54, 0x43, 0x48, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x20, 0x61, 0x2d,
  0x67, 0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44,
  0x0a, 0x47, 0x45, 0x54, 0x43, 0x48, 0x20, 0x61, 0x20, 0x47, 0x45, 0x54,
  0x43, 0x48, 0x41, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x48, 0x20, 0x62, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x47, 0x45, 0x54,
  0x43, 0x48, 0x41, 0x20, 0x72, 0x20, 0x47, 0x45, 0x54, 0x43, 0x48, 0x41,
  0x52, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x48, 0x41, 0x20, 0x61, 0x2d, 0x71,
  0x20, 0x73, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a,
  0x47, 0x45, 0x54, 0x43, 0x48, 0x41, 0x52, 0x20, 0x61, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x20, 0x6e, 0x20, 0x4e, 0x0a, 0x4e, 0x20, 0x65, 0x20, 0x4e, 0x45, 0x31,
  0x0a, 0x4e, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x4e, 0x45, 0x31, 0x20, 0x77, 0x20,
  0x4e, 0x45, 0x57, 0x0a, 0x4e, 0x45, 0x31, 0x20, 0x61, 0x2d, 0x76, 0x20,
  0x78, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x4e,
  0x45, 0x57, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x4e, 0x20, 0x4e, 0x31,
  0x0a, 0x4e, 0x31, 0x20, 0x55, 0x20, 0x4e, 0x55, 0x0a, 0x4e, 0x31, 0x20,
  0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x54, 0x20, 0x56, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x0a, 0x4e, 0x55, 0x20, 0x4c, 0x20, 0x4e, 0x55, 0x4c, 0x0a,
  0x4e, 0x55, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x4b, 0x20, 0x4d,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x4e, 0x55, 0x4c, 0x20, 0x4c, 0x20,
  0x4e, 0x55, 0x4c, 0x4c, 0x0a, 0x4e, 0x55, 0x4c, 0x20, 0x61, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x4b, 0x20, 0x4d, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a,
  0x4e, 0x55, 0x4c, 0x4c, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x72, 0x20,
  0x52, 0x0a, 0x52, 0x20, 0x65, 0x20, 0x52, 0x45, 0x0a, 0x52, 0x20, 0x61,
  0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49,
  0x44, 0x20, 0x0a, 0x52, 0x45, 0x20, 0x74, 0x20, 0x52, 0x45, 0x54, 0x0a,
  0x52, 0x45, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x52, 0x45, 0x54, 0x20, 0x75,
  0x20, 0x52, 0x45, 0x54, 0x55, 0x0a, 0x52, 0x45, 0x54, 0x20, 0x61, 0x2d,
  0x74, 0x20, 0x76, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44,
  0x20, 0x0a, 0x52, 0x45, 0x54, 0x55, 0x20, 0x72, 0x20, 0x52, 0x45, 0x54,
  0x55, 0x52, 0x0a, 0x52, 0x45, 0x54, 0x55, 0x20, 0x61, 0x2d, 0x71, 0x20,
  0x73, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a,
  0x52, 0x45, 0x54, 0x55, 0x52, 0x20, 0x6e, 0x20, 0x52, 0x45, 0x54, 0x55,
  0x52, 0x4e, 0x0a, 0x52, 0x45, 0x54, 0x55, 0x52, 0x20, 0x61, 0x2d, 0x6d,
  0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20,
  0x0a, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x20, 0x61, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x73, 0x74, 0x61, 0x72,
  0x74, 0x20, 0x64, 0x20, 0x44, 0x0a, 0x44, 0x20, 0x65, 0x20, 0x44, 0x45,
  0x0a, 0x44, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x44, 0x45, 0x20, 0x6c, 0x20,
  0x44, 0x45, 0x4c, 0x0a, 0x44, 0x45, 0x20, 0x61, 0x2d, 0x6b, 0x20, 0x6d,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x44,
  0x45, 0x4c, 0x20, 0x65, 0x20, 0x44, 0x45, 0x4c, 0x45, 0x0a, 0x44, 0x45,
  0x4c, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x20, 0x74,
  0x20, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x20,
  0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x49, 0x44, 0x20, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x20, 0x65, 0x20,
  0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54,
  0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x49, 0x44, 0x20, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x20,
  0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x20, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x20, 0x62, 0x20, 0x63, 0x20,
  0x66, 0x20, 0x68, 0x20, 0x6a, 0x2d, 0x6d, 0x20, 0x6f, 0x20, 0x71, 0x20,
  0x73, 0x2d, 0x76, 0x20, 0x78, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x4d, 0x20,
  0x4f, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x49, 0x44, 0x20, 0x61, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x53, 0x4c, 0x41,
  0x53, 0x48, 0x20, 0x2f, 0x20, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54,
  0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x28, 0x20, 0x29,
  0x20, 0x7b, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x21, 0x20, 0x3c, 0x20, 0x3e,
  0x20, 0x2b, 0x20, 0x2d, 0x20, 0x2a, 0x20, 0x2f, 0x20, 0x25, 0x20, 0x2c,
  0x20, 0x3b, 0x20, 0x5b, 0x20, 0x5d, 0x20, 0x26, 0x20, 0x43, 0x4f, 0x4d,
  0x4d, 0x45, 0x4e, 0x54, 0x0a, 0x2e, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x0a
};
unsigned int wlp4scan_dfa_len = 2628;




  
  
std::unordered_set<std::string> mySet = {"W","WA","WAI","WAI","I","IN","E","EL","ELS","WH","WHI","WHIL",
                                         "P","PR","PRI","PRIN","PRINT","PRINTL","PU","PUT","PUTC","PUTCH","PUTCHA",
                                         "G","GE1","GET","GETC","GETCH","GETCHA","R","RE","RET","RETU","RETUR",
                                         "N1","NU","NUL","N","NE1","D","DE","DEL","DELE","DELET"};


const std::string ALPHABET    = ".ALPHABET";
const std::string STATES      = ".STATES";
const std::string TRANSITIONS = ".TRANSITIONS";
const std::string INPUT       = ".INPUT";
const std::string EMPTY       = ".EMPTY";

std::unordered_set<char> alphabet;
std::unordered_set<std::string> states;
std::unordered_set<std::string> acceptingStates;
std::string startState;
std::unordered_map<std::string,std::unordered_map<char,std::string>> transition;


bool isChar(std::string s) {
  return s.length() == 1;
}
bool isRange(std::string s) {
  return s.length() == 3 && s[1] == '-';
}


// Locations in the program that you should modify to store the
// DFA information have been marked with four-slash comments:
//// (Four-slash comment)
int main() {
  std::string foo((char *) wlp4scan_dfa, wlp4scan_dfa_len);
  std::stringstream in(foo);
  std::istream& in2 = std::cin;
  std::string s;

  std::getline(in, s); // Alphabet section (skip header)
  // Read characters or ranges separated by whitespace
  while(in >> s) {
    if (s == STATES) { 
      break; 
    } else {
      if (isChar(s)) {
        //// Variable 's[0]' is an alphabet symbol
        alphabet.insert(s[0]);
      } else if (isRange(s)) {
        for(char c = s[0]; c <= s[2]; ++c) {
          //// Variable 'c' is an alphabet symbol
          alphabet.insert(c);
        }
      } 
    }
  }

  std::getline(in, s); // States section (skip header)
  // Read states separated by whitespace
  while(in >> s) {
    if (s == TRANSITIONS) { 
      break; 
    } else {
      static bool initial = true;
      bool accepting = false;
      if (s.back() == '!' && !isChar(s)) {
        accepting = true;
        s.pop_back();
      }
      //// Variable 's' contains the name of a state
      states.insert(s);

      if (initial) {
        startState = s;
        initial = false;
      }
      if (accepting) {
        //// The state is accepting
        acceptingStates.insert(s);
      }
    }
  }

  std::getline(in, s); // Transitions section (skip header)
  // Read transitions line-by-line
  while(std::getline(in, s)) {
    if (s == INPUT) { 
      // Note: Since we're reading line by line, once we encounter the
      // input header, we will already be on the line after the header
      break; 
    } else {
      std::string fromState, symbols, toState;
      std::istringstream line(s);
      std::vector<std::string> lineVec;
      while(line >> s) {
        lineVec.push_back(s);
      }
      fromState = lineVec.front();
      toState = lineVec.back();
      for(int i = 1; i < lineVec.size()-1; ++i) {
        std::string s = lineVec[i];
        if (isChar(s)) {
          symbols += s;
        } else if (isRange(s)) {
          for(char c = s[0]; c <= s[2]; ++c) {
            symbols += c;
          }
        }
      }
      for ( char c : symbols ) {
        //// There is a transition from 'fromState' to 'toState' on 'c'
        transition[fromState][c] = toState;
      }
    }
  }
  // Input section (already skipped header)
  while(in2 >> s) {
    std::string cur = startState;
    bool reject = false;
    std::string result;
    for(int i = 0; i < s.length(); i++){
      
      if (transition.find(cur) != transition.end() && transition.at(cur).find(s[i]) != transition.at(cur).end()){
        // found the next state
        cur = transition[cur][s[i]];
        result.push_back(s[i]);
      } else if(acceptingStates.find(cur) != acceptingStates.end()){           //CHECK BOUND! 2^31-1


        // no transition after output accepted state and start over
        if (cur == "ZERO"){
            std::cout << "NUM" << " " << result <<std::endl;
        } else if(cur == "NUM"){
            // check bound
            double out = std::stoll(result);
            if(out > 2147483647){
                reject = true;
                break;
            }
            std::cout << "NUM" << " " << result <<std::endl;
        } else if(mySet.find(cur)!=mySet.end()){
          
            std::cout << "ID" << " " << result <<std::endl;
        }  else {
          
            std::cout << cur << " " << result <<std::endl;
        }

        result = "";
        cur = startState;
        //restart over
        if (transition.find(cur) != transition.end() && transition.at(cur).find(s[i]) != transition.at(cur).end()){
          // found the next state
          cur = transition[cur][s[i]];
          result.push_back(s[i]);
        } else {
          reject = true; 
          break;
        }
      } else {
        reject = true; 
        break;
      }            
    }

    if (acceptingStates.find(cur) == acceptingStates.end()){
      reject = true;
    }

    if(reject){
        std::cerr << "ERROR" << std::endl; 
        break;
    } 
    if (cur == "ZERO"){
        std::cout << "NUM" << " " << result <<std::endl;
    } else if(cur == "NUM"){
        // check bound
        double out = std::stoll(result);
        if(out > 2147483647){
            std::cerr << "ERROR" << std::endl; 
            break;
        }
        std::cout << "NUM" << " " << result <<std::endl;
    } else if(cur == "COMMENT"){
      std::string temp;
      getline(in2,temp);
      continue;
    } else if(mySet.find(cur)!=mySet.end()){  
      std::cout << "ID" << " " << result <<std::endl;
    }  else {
      std::cout << cur << " " << result <<std::endl;
    }
  }
}
